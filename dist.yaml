openapi: 3.0.2
info:
  version: 1.0.0
  title: NLP Sandbox Data Node Schemas
  contact:
    email: thomas.schaffter@sagebionetworks.org
    url: 'https://data2health.github.io/nlp-sandbox-data-node-schemas'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://data2health.github.io/nlp-sandbox-data-node-schemas/docs/logo.png'
  description: >
    The OpenAPI specification implemented by NLP Sandbox Data Nodes.

    # Introduction

    This API definition is intended to to be a good starting point for
    describing your API in

    [OpenAPI/Swagger
    format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).

    It also demonstrates features of
    [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool
    and

    [Redoc](https://github.com/Redocly/Redoc) documentation engine. So beyond
    the standard OpenAPI syntax we use a few

    [vendor
    extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).


    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard,
    language-agnostic interface to REST APIs which

    allows both humans and computers to discover and understand the capabilities
    of the service without access to source

    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can

    understand and interact with the remote service with a minimal amount of
    implementation logic. Similar to what

    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
tags:
  - name: Echo
    description: Example echo operations
  - name: Note
    description: Operations about Note
servers:
  - url: 'http://example.com/api/v1'
  - url: 'https://example.com/api/v1'
paths:
  '/note/{noteid}':
    parameters:
      - name: pretty_print
        in: query
        description: Pretty print response
        schema:
          type: boolean
    get:
      tags:
        - Note
      summary: Get note by noteId
      description: |
        Returns the Note Text for a given Noteid
      operationId: notes.read
      parameters:
        - name: noteid
          in: path
          description: The noteid that needs to be fetched
          required: true
          schema:
            type: string
      security:
        - api_key: []
        - basic_auth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '403':
          description: Forbidden
        '404':
          description: Note not found
    put:
      tags:
        - Note
      summary: Updated note
      description: This can only be done by the logged in user.
      operationId: notes.update
      parameters:
        - name: noteid
          in: path
          description: The noteid that needs to be updated
          required: true
          schema:
            type: string
      security:
        - main_auth:
            - 'write:note'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid note supplied
        '404':
          description: Note not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
          application/xml:
            schema:
              $ref: '#/components/schemas/Note'
        description: Updated note object
        required: true
  /notes:
    parameters:
      - name: pretty_print
        in: query
        description: Pretty print response
        schema:
          type: boolean
    get:
      tags:
        - Note
      summary: Get All Notes
      description: Returns all Notes
      operationId: notes.read_all
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '403':
          description: Forbidden
        '404':
          description: Note not found
  /echo:
    post:
      tags:
        - Echo
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      security:
        - api_key: []
        - basic_auth: []
      responses:
        '200':
          description: OK
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              $ref: '#/components/headers/ExpiresAfter'
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: Hello world!
            application/xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: Hello world!
          application/xml:
            schema:
              type: string
              example: Hello world!
        description: Echo payload
        required: true
components:
  securitySchemes:
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://example.com/api/oauth/dialog'
          scopes:
            'read:users': read users info
            'write:users': modify or remove users
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
  schemas:
    Note:
      type: object
      properties:
        id:
          description: ID for this note
          type: integer
          minLength: 1
          example: 1
        text:
          description: Full Identified Text Note
          type: string
          minLength: 1
          example: John78
        fileName:
          description: Associated File Name
          type: string
          example: 260-01.xml
        type:
          description: 'Note type [ pathology , phone call, etc. ]'
          type: string
          example: 'testing , Inpatient , Phone'
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
