{
  "openapi": "3.0.2",
  "info": {
    "version": "0.2.0",
    "title": "NLP Sandbox Deidentifier API",
    "contact": {
      "name": "The NLP Sandbox Team",
      "email": "thomas.schaffter@sagebionetworks.org",
      "url": "https://Sage-Bionetworks.github.io/nlp-sandbox-schemas"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/Sage-Bionetworks/nlp-sandbox/blob/main/LICENSE"
    },
    "x-logo": {
      "url": "https://Sage-Bionetworks.github.io/nlp-sandbox-schemas/logo.png"
    },
    "description": "The OpenAPI specification implemented by NLP Sandbox PHI Deidentifiers.\n# Overview\nTBA\n"
  },
  "tags": [
    {
      "name": "DeidentifiedNotes",
      "description": "Operations about deidentified notes"
    },
    {
      "name": "Service",
      "description": "Operations about this API service"
    }
  ],
  "servers": [
    {
      "url": "http://example.com/api/v1"
    },
    {
      "url": "https://example.com/api/v1"
    }
  ],
  "paths": {
    "/deidentifiedNotes": {
      "post": {
        "tags": [
          "DeidentifiedNotes"
        ],
        "summary": "Deidentify a clinical note",
        "description": "Returns the deidentified note",
        "operationId": "createDeidentifiedNotes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeidentifyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeidentifyResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/service": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get service information",
        "description": "Get information about the service",
        "operationId": "service",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DeidentificationConfig": {
        "type": "object",
        "description": "Configuration of one deidentification strategy and a list of annotation types to apply it to.",
        "properties": {
          "deidentificationStrategy": {
            "type": "object",
            "description": "The strategy used to de-identify the note's text. Only one field may be set.",
            "properties": {
              "maskingCharConfig": {
                "type": "object",
                "description": "Configuration for the masking char strategy. E.g. \"John Smith lives at 123 Main St\" -> \"********* lives at ***********\".",
                "properties": {
                  "maskingChar": {
                    "type": "string",
                    "description": "Character used to mask annotated PII text.",
                    "minLength": 1,
                    "maxLength": 1,
                    "default": "*"
                  }
                }
              },
              "redactConfig": {
                "type": "object",
                "description": "Configuration for the redaction strategy. E.g. \"John Smith lives at 123 Main St\" -> \"lives at\"."
              },
              "annotationTypeConfig": {
                "type": "object",
                "description": "Configuration for the \"annotation type\" strategy. E.g. \"John Smith lives at 123 Main St\" -> \"[PERSON_NAME] lives at [PHYSICAL_ADDRESS]\"."
              },
              "dateOffsetConfig": {
                "type": "object",
                "description": "Configuration for the \"date offset\" strategy. E.g. \"John Smith visited on 1 January 2020\" -> \"John Smith visited on 29 October 2025\". Note, can only be set with the \"text_date\" annotation type.",
                "properties": {
                  "offsetDays": {
                    "type": "integer",
                    "description": "Number of days by which to offset annotated dates."
                  }
                }
              }
            }
          },
          "annotationTypes": {
            "type": "array",
            "description": "the types of annotations to which the de-identifer should apply the selected strategy",
            "items": {
              "type": "string",
              "enum": [
                "text_physical_address",
                "text_date",
                "text_person_name"
              ]
            }
          }
        }
      },
      "Note": {
        "type": "object",
        "description": "A clinical note",
        "properties": {
          "id": {
            "description": "The ID of the note",
            "type": "string",
            "readOnly": true
          },
          "text": {
            "description": "The content of the clinical note",
            "type": "string",
            "example": "This is the content of a clinical note."
          },
          "noteType": {
            "description": "The note type (LOINC concept)",
            "type": "string",
            "example": "loinc:LP29684-5"
          },
          "patientId": {
            "description": "The patient ID",
            "type": "string",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [
          "text",
          "noteType"
        ]
      },
      "DeidentifyRequest": {
        "type": "object",
        "description": "A request to de-identify a note",
        "properties": {
          "deidentificationConfigurations": {
            "type": "array",
            "description": "A list of deidentification strategies and the entity types on which to perform them. De-identification priority (i.e. which annotation to use when two annotations overlap) is determined by the order of this array and the order of the annotationTypes array inside of each deidentificationConfig.",
            "items": {
              "$ref": "#/components/schemas/DeidentificationConfig"
            }
          },
          "note": {
            "$ref": "#/components/schemas/Note"
          }
        },
        "required": [
          "note"
        ]
      },
      "AnnotationSource": {
        "type": "object",
        "description": "The source of an annotation record",
        "properties": {
          "name": {
            "description": "The source of the annotation record",
            "type": "string"
          }
        }
      },
      "TextAnnotation": {
        "type": "object",
        "description": "An annotation in a text",
        "properties": {
          "start": {
            "description": "The position of the first character",
            "type": "integer",
            "example": 42
          },
          "length": {
            "description": "The length of the annotation",
            "type": "integer",
            "example": 10
          },
          "text": {
            "description": "The string annotated",
            "type": "string"
          }
        },
        "required": [
          "start",
          "length"
        ]
      },
      "TextDateAnnotation": {
        "type": "object",
        "description": "A date annotation in a text",
        "allOf": [
          {
            "$ref": "#/components/schemas/TextAnnotation"
          },
          {
            "type": "object",
            "properties": {
              "dateFormat": {
                "description": "Date format (ISO 8601)",
                "type": "string",
                "example": "MM/DD/YYYY"
              }
            }
          }
        ],
        "example": {
          "start": 42,
          "length": 10,
          "text": "10/26/2020",
          "dateFormat": "MM/DD/YYYY"
        }
      },
      "TextPersonNameAnnotation": {
        "type": "object",
        "description": "A person name annotation in a text",
        "allOf": [
          {
            "$ref": "#/components/schemas/TextAnnotation"
          }
        ],
        "example": {
          "start": 42,
          "length": 11,
          "text": "Chloe Price"
        }
      },
      "TextPhysicalAddressAnnotation": {
        "type": "object",
        "description": "A person name annotation in a text",
        "allOf": [
          {
            "$ref": "#/components/schemas/TextAnnotation"
          },
          {
            "type": "object",
            "properties": {
              "addressType": {
                "description": "Type of address information",
                "type": "string",
                "enum": [
                  "city",
                  "country",
                  "department",
                  "hospital",
                  "organization",
                  "other",
                  "room",
                  "state",
                  "street",
                  "zip"
                ]
              }
            }
          }
        ],
        "example": {
          "start": 42,
          "length": 11,
          "text": "Seattle",
          "addressType": "city"
        }
      },
      "Annotation": {
        "type": "object",
        "description": "An annotation record",
        "properties": {
          "name": {
            "description": "Resource name of the annotation record, of the form datasets/{datasetId}/annotationStores/{annotationStoreId}/annotations/{annotationId}",
            "type": "string",
            "readOnly": true
          },
          "annotationSource": {
            "$ref": "#/components/schemas/AnnotationSource"
          },
          "textDateAnnotations": {
            "description": "Date annotations in a text",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextDateAnnotation"
            }
          },
          "textPersonNameAnnotations": {
            "description": "Person name annotations in a text",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextPersonNameAnnotation"
            }
          },
          "textPhysicalAddressAnnotations": {
            "description": "Physical address annotations in a text",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextPhysicalAddressAnnotation"
            }
          }
        }
      },
      "DeidentifyResponse": {
        "type": "object",
        "description": "Response to deidentification request",
        "properties": {
          "originalAnnotations": {
            "$ref": "#/components/schemas/Annotation"
          },
          "deidentifiedAnnotations": {
            "$ref": "#/components/schemas/Annotation"
          },
          "deidentifiedNote": {
            "$ref": "#/components/schemas/Note"
          }
        }
      },
      "Error": {
        "type": "object",
        "description": "Problem details (tools.ietf.org/html/rfc7807)",
        "properties": {
          "title": {
            "type": "string",
            "description": "A human readable documentation for the problem type"
          },
          "status": {
            "type": "integer",
            "description": "The HTTP status code"
          },
          "detail": {
            "type": "string",
            "description": "A human readable explanation specific to this occurrence of the problem"
          },
          "type": {
            "type": "string",
            "description": "An absolute URI that identifies the problem type"
          }
        },
        "required": [
          "title",
          "status"
        ]
      },
      "Service": {
        "type": "object",
        "description": "Information about an NLP service",
        "properties": {
          "name": {
            "description": "The service name",
            "type": "string",
            "minLength": 3,
            "maxLength": 60,
            "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$",
            "example": "awesome-date-annotator"
          },
          "version": {
            "description": "The version of the service (SemVer string)",
            "type": "string",
            "minLength": 1,
            "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
            "example": "1.0.0"
          },
          "license": {
            "description": "The license of this service (spdx.org/licenses Identifier)",
            "type": "string",
            "example": "Apache-2.0"
          },
          "repository": {
            "description": "The place where the code lives",
            "type": "string",
            "example": "github:awesome-org/awesome-date-annotator"
          },
          "description": {
            "description": "A short, one-sentence summary of the service",
            "type": "string",
            "maxLength": 100,
            "example": "An awesome Date Annotator based on regex patterns"
          },
          "author": {
            "description": "The author of the service",
            "type": "string",
            "example": "Example Author"
          },
          "authorEmail": {
            "description": "The email address of the author",
            "type": "string",
            "format": "email",
            "example": "author@example.com"
          },
          "url": {
            "description": "The URL to the homepage of the service",
            "type": "string",
            "format": "uri"
          }
        }
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}